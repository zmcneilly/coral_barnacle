service: PasswordGenerationService # NOTE: update this with your service name

provider:
  name: aws
  runtime: python3.7
  deploymentPrefix: PassGenServ
  stage: ${opt:stage, 'dev'}
  logRetentionInDays: 30
  timeout: 30
  memorySize: 128
  environment:
    STAGE: ${self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "ServerlessDeploymentBucket"
            - "/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:DescribeTable"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource:
        Fn::Join:
            - ""
            - - "arn:aws:dynamodb:"
              - "Ref" : "AWS::Region"
              - ":"
              - "Ref" : "AWS::AccountId"
              - ":table/word_dictionary"

plugins:
  - serverless-domain-manager
  - serverless-python-requirements

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: api.charypass.com
    dev: dev-api.charypass.com

  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: 'v1'
    stage: ${self:provider.stage}
    createRoute53Record: true

  pythonRequirements:
    dockerizePip: non-linux

package:
  include:
    - password_generation/**
  exclude:
    - src/docs/**
    - venv/**
    - tests/**

functions:
  gen:
    handler: password_generation.handlers.generate_password
    events:
      - http:
          path: /gen
          method: get
